<?php

/**
 * This file is part of the package magicsunday/photo-memories.
 *
 * For the full copyright and license information, please read the
 * LICENSE file that was distributed with this source code.
 */

declare(strict_types=1);

namespace MagicSunday\Memories\Entity;

use DateTimeImmutable;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

/**
 * Resolved geocoded location with hierarchical address information.
 */
#[ORM\Entity]
#[ORM\Table(name: 'location')]
#[ORM\UniqueConstraint(name: 'uniq_loc_provider', columns: ['provider', 'providerPlaceId'])]
#[ORM\Index(name: 'idx_loc_cell', columns: ['cell'])]
#[ORM\Index(name: 'idx_loc_country_city', columns: ['countryCode', 'city'])]
class Location
{
    /**
     * Surrogate identifier generated by the persistence layer.
     */
    #[ORM\Id]
    #[ORM\Column(type: Types::BIGINT)]
    #[ORM\GeneratedValue]
    private ?int $id = null;

    /**
     * Provider name from which the geocoding result originated.
     */
    #[ORM\Column(type: Types::STRING, length: 32)]
    private string $provider;

    /**
     * Provider specific identifier for deduplication.
     */
    #[ORM\Column(type: Types::STRING, length: 64)]
    private string $providerPlaceId;

    /**
     * Latitude of the resolved location in decimal degrees.
     */
    #[ORM\Column(type: Types::FLOAT)]
    private float $lat;

    /**
     * Longitude of the resolved location in decimal degrees.
     */
    #[ORM\Column(type: Types::FLOAT)]
    private float $lon;

    /**
     * Spatial hash used to group nearby results.
     */
    #[ORM\Column(type: Types::STRING, length: 32)]
    private string $cell;

    /**
     * Human friendly representation of the location.
     */
    #[ORM\Column(type: Types::STRING, length: 512)]
    private string $displayName;

    /**
     * Two letter ISO country code when provided by the geocoder.
     */
    #[ORM\Column(type: Types::STRING, length: 2, nullable: true)]
    private ?string $countryCode = null;

    /**
     * Country name resolved from the provider.
     */
    #[ORM\Column(type: Types::STRING, length: 128, nullable: true)]
    private ?string $country = null;

    /**
     * State or region component of the address hierarchy.
     */
    #[ORM\Column(type: Types::STRING, length: 128, nullable: true)]
    private ?string $state = null;

    /**
     * County or administrative district information.
     */
    #[ORM\Column(type: Types::STRING, length: 128, nullable: true)]
    private ?string $county = null;

    /**
     * City name assigned to the location.
     */
    #[ORM\Column(type: Types::STRING, length: 128, nullable: true)]
    private ?string $city = null;

    /**
     * Suburb or neighbourhood name.
     */
    #[ORM\Column(type: Types::STRING, length: 128, nullable: true)]
    private ?string $suburb = null;

    /**
     * Postal code associated with the location.
     */
    #[ORM\Column(type: Types::STRING, length: 16, nullable: true)]
    private ?string $postcode = null;

    /**
     * Road or street name of the address.
     */
    #[ORM\Column(type: Types::STRING, length: 128, nullable: true)]
    private ?string $road = null;

    /**
     * House number or building identifier.
     */
    #[ORM\Column(type: Types::STRING, length: 32, nullable: true)]
    private ?string $houseNumber = null;

    /**
     * Broad category as reported by the provider (for example, tourism).
     */
    #[ORM\Column(type: Types::STRING, length: 64, nullable: true)]
    private ?string $category = null;

    /**
     * Specific place type such as viewpoint or museum.
     */
    #[ORM\Column(type: Types::STRING, length: 64, nullable: true)]
    private ?string $type = null;

    /**
     * Bounding box coordinates describing the spatial footprint.
     *
     * @var list<float>|null $boundingBox
     */
    #[ORM\Column(type: Types::JSON, nullable: true)]
    private ?array $boundingBox = null;

    /**
     * Nearby Points of Interest enriched via Overpass API responses.
     *
     * @var list<array<string, mixed>>|null $pois
     */
    #[ORM\Column(type: Types::JSON, nullable: true)]
    private ?array $pois = null;

    /**
     * Attribution string required by the provider.
     */
    #[ORM\Column(type: Types::STRING, length: 255, nullable: true)]
    private ?string $attribution = null;

    /**
     * Licence string provided by the geocoding service.
     */
    #[ORM\Column(type: Types::STRING, length: 255, nullable: true)]
    private ?string $licence = null;

    /**
     * Timestamp when the location metadata was last refreshed.
     */
    #[ORM\Column(type: Types::DATETIME_IMMUTABLE, nullable: true)]
    private ?DateTimeImmutable $refreshedAt = null;

    /**
     * Indicates that the metadata should be refreshed from the provider.
     */
    #[ORM\Column(type: Types::BOOLEAN, options: ['default' => false])]
    private bool $stale = false;

    /**
     * Provider supplied confidence/importance score.
     */
    #[ORM\Column(type: Types::FLOAT, nullable: true)]
    private ?float $confidence = null;

    /**
     * Estimated accuracy radius in meters.
     */
    #[ORM\Column(type: Types::FLOAT, nullable: true)]
    private ?float $accuracyRadiusMeters = null;

    /**
     * Timezone identifier for the resolved location.
     */
    #[ORM\Column(type: Types::STRING, length: 64, nullable: true)]
    private ?string $timezone = null;

    /**
     * OpenStreetMap element type.
     */
    #[ORM\Column(type: Types::STRING, length: 16, nullable: true)]
    private ?string $osmType = null;

    /**
     * OpenStreetMap element identifier.
     */
    #[ORM\Column(type: Types::STRING, length: 32, nullable: true)]
    private ?string $osmId = null;

    /**
     * Wikidata identifier reference.
     */
    #[ORM\Column(type: Types::STRING, length: 32, nullable: true)]
    private ?string $wikidataId = null;

    /**
     * Wikipedia article reference.
     */
    #[ORM\Column(type: Types::STRING, length: 128, nullable: true)]
    private ?string $wikipedia = null;

    /**
     * Alternative names keyed by qualifier or locale.
     *
     * @var array<string, string>|null $altNames
     */
    #[ORM\Column(type: Types::JSON, nullable: true)]
    private ?array $altNames = null;

    /**
     * Additional provider specific tags.
     *
     * @var array<string, string>|null $extraTags
     */
    #[ORM\Column(type: Types::JSON, nullable: true)]
    private ?array $extraTags = null;

    /**
     * @param string $provider        geocoding provider name
     * @param string $providerPlaceId unique provider identifier
     * @param string $displayName     human friendly label
     * @param float  $lat             latitude component
     * @param float  $lon             longitude component
     * @param string $cell            spatial cell key for grouping
     */
    public function __construct(
        string $provider,
        string $providerPlaceId,
        string $displayName,
        float $lat,
        float $lon,
        string $cell,
    ) {
        $this->provider        = $provider;
        $this->providerPlaceId = $providerPlaceId;
        $this->displayName     = $displayName;
        $this->lat             = $lat;
        $this->lon             = $lon;
        $this->cell            = $cell;
    }

    /**
     * Returns the database identifier once persisted.
     *
     * @return int|null identifier assigned by Doctrine or null for new entities
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Returns the origin provider.
     *
     * @return string provider name
     */
    public function getProvider(): string
    {
        return $this->provider;
    }

    /**
     * Returns the provider specific identifier.
     *
     * @return string provider specific place identifier
     */
    public function getProviderPlaceId(): string
    {
        return $this->providerPlaceId;
    }

    /**
     * Returns the latitude of the location.
     *
     * @return float latitude in decimal degrees
     */
    public function getLat(): float
    {
        return $this->lat;
    }

    /**
     * Returns the longitude of the location.
     *
     * @return float longitude in decimal degrees
     */
    public function getLon(): float
    {
        return $this->lon;
    }

    /**
     * Returns the spatial cell identifier.
     *
     * @return string spatial cell hash
     */
    public function getCell(): string
    {
        return $this->cell;
    }

    /**
     * Returns the display label for the location.
     *
     * @return string human readable label
     */
    public function getDisplayName(): string
    {
        return $this->displayName;
    }

    /**
     * Updates the display label.
     *
     * @param string $displayName human readable label
     *
     * @return Location
     */
    public function setDisplayName(string $displayName): Location
    {
        $this->displayName = $displayName;

        return $this;
    }

    /**
     * Returns the ISO country code.
     *
     * @return string|null ISO alpha-2 code or null when unavailable
     */
    public function getCountryCode(): ?string
    {
        return $this->countryCode;
    }

    /**
     * Sets the ISO country code.
     *
     * @param string|null $countryCode ISO alpha-2 code
     *
     * @return Location
     */
    public function setCountryCode(?string $countryCode): Location
    {
        $this->countryCode = $countryCode;

        return $this;
    }

    /**
     * Returns the resolved country name.
     *
     * @return string|null country name or null when unknown
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
     * Sets the country name.
     *
     * @param string|null $country country name
     *
     * @return Location
     */
    public function setCountry(?string $country): Location
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Returns the state or region.
     *
     * @return string|null state or region name
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets the state or region.
     *
     * @param string|null $state state or region name
     *
     * @return Location
     */
    public function setState(?string $state): Location
    {
        $this->state = $state;

        return $this;
    }

    /**
     * Returns the county information.
     *
     * @return string|null county or administrative district name
     */
    public function getCounty(): ?string
    {
        return $this->county;
    }

    /**
     * Sets the county information.
     *
     * @param string|null $county county or administrative district name
     *
     * @return Location
     */
    public function setCounty(?string $county): Location
    {
        $this->county = $county;

        return $this;
    }

    /**
     * Returns the city component of the address.
     *
     * @return string|null city name
     */
    public function getCity(): ?string
    {
        return $this->city;
    }

    /**
     * Sets the city component of the address.
     *
     * @param string|null $city city name
     *
     * @return Location
     */
    public function setCity(?string $city): Location
    {
        $this->city = $city;

        return $this;
    }

    /**
     * Returns the suburb or neighbourhood.
     *
     * @return string|null suburb or neighbourhood name
     */
    public function getSuburb(): ?string
    {
        return $this->suburb;
    }

    /**
     * Sets the suburb or neighbourhood.
     *
     * @param string|null $suburb suburb or neighbourhood name
     *
     * @return Location
     */
    public function setSuburb(?string $suburb): Location
    {
        $this->suburb = $suburb;

        return $this;
    }

    /**
     * Returns the postal code.
     *
     * @return string|null postal code string
     */
    public function getPostcode(): ?string
    {
        return $this->postcode;
    }

    /**
     * Sets the postal code.
     *
     * @param string|null $postcode postal code string
     *
     * @return Location
     */
    public function setPostcode(?string $postcode): Location
    {
        $this->postcode = $postcode;

        return $this;
    }

    /**
     * Returns the road name.
     *
     * @return string|null road or street name
     */
    public function getRoad(): ?string
    {
        return $this->road;
    }

    /**
     * Sets the road name.
     *
     * @param string|null $road road or street name
     *
     * @return Location
     */
    public function setRoad(?string $road): Location
    {
        $this->road = $road;

        return $this;
    }

    /**
     * Returns the house number or building identifier.
     *
     * @return string|null house number or building identifier
     */
    public function getHouseNumber(): ?string
    {
        return $this->houseNumber;
    }

    /**
     * Sets the house number or building identifier.
     *
     * @param string|null $houseNumber house number or building identifier
     *
     * @return Location
     */
    public function setHouseNumber(?string $houseNumber): Location
    {
        $this->houseNumber = $houseNumber;

        return $this;
    }

    /**
     * Returns the broad location category.
     *
     * @return string|null category label
     */
    public function getCategory(): ?string
    {
        return $this->category;
    }

    /**
     * Sets the broad location category.
     *
     * @param string|null $category category label
     *
     * @return Location
     */
    public function setCategory(?string $category): Location
    {
        $this->category = $category;

        return $this;
    }

    /**
     * Returns the specific place type.
     *
     * @return string|null type label
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets the specific place type.
     *
     * @param string|null $type type label
     *
     * @return Location
     */
    public function setType(?string $type): Location
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Returns the bounding box describing the extent of the location.
     *
     * @return list<float>|null
     */
    public function getBoundingBox(): ?array
    {
        return $this->boundingBox;
    }

    /**
     * Sets the bounding box describing the extent of the location.
     *
     * @param list<float>|null $boundingBox
     *
     * @return Location
     */
    public function setBoundingBox(?array $boundingBox): Location
    {
        $this->boundingBox = $boundingBox;

        return $this;
    }

    /**
     * Returns enriched nearby Points of Interest.
     *
     * @return list<array<string, mixed>>|null
     */
    public function getPois(): ?array
    {
        return $this->pois;
    }

    /**
     * Stores enriched nearby Points of Interest.
     *
     * @param list<array<string, mixed>>|null $pois
     *
     * @return Location
     */
    public function setPois(?array $pois): Location
    {
        $this->pois = $pois;

        return $this;
    }

    /**
     * Returns the attribution string for the location.
     */
    public function getAttribution(): ?string
    {
        return $this->attribution;
    }

    /**
     * Sets the attribution string for the location.
     */
    public function setAttribution(?string $attribution): Location
    {
        $this->attribution = $attribution;

        return $this;
    }

    /**
     * Returns the licence string supplied by the provider.
     */
    public function getLicence(): ?string
    {
        return $this->licence;
    }

    /**
     * Sets the licence string supplied by the provider.
     */
    public function setLicence(?string $licence): Location
    {
        $this->licence = $licence;

        return $this;
    }

    /**
     * Returns the timestamp when the metadata was last refreshed.
     */
    public function getRefreshedAt(): ?DateTimeImmutable
    {
        return $this->refreshedAt;
    }

    /**
     * Sets the timestamp when the metadata was last refreshed.
     */
    public function setRefreshedAt(?DateTimeImmutable $refreshedAt): Location
    {
        $this->refreshedAt = $refreshedAt;

        return $this;
    }

    /**
     * Indicates whether the metadata should be refreshed.
     */
    public function isStale(): bool
    {
        return $this->stale;
    }

    /**
     * Marks the metadata as stale or up to date.
     */
    public function setStale(bool $stale): Location
    {
        $this->stale = $stale;

        return $this;
    }

    /**
     * Returns the provider supplied confidence value.
     */
    public function getConfidence(): ?float
    {
        return $this->confidence;
    }

    /**
     * Sets the provider supplied confidence value.
     */
    public function setConfidence(?float $confidence): Location
    {
        $this->confidence = $confidence;

        return $this;
    }

    /**
     * Returns the estimated accuracy radius in meters.
     */
    public function getAccuracyRadiusMeters(): ?float
    {
        return $this->accuracyRadiusMeters;
    }

    /**
     * Sets the estimated accuracy radius in meters.
     */
    public function setAccuracyRadiusMeters(?float $accuracyRadiusMeters): Location
    {
        $this->accuracyRadiusMeters = $accuracyRadiusMeters;

        return $this;
    }

    /**
     * Returns the timezone identifier.
     */
    public function getTimezone(): ?string
    {
        return $this->timezone;
    }

    /**
     * Sets the timezone identifier.
     */
    public function setTimezone(?string $timezone): Location
    {
        $this->timezone = $timezone;

        return $this;
    }

    /**
     * Returns the OSM element type.
     */
    public function getOsmType(): ?string
    {
        return $this->osmType;
    }

    /**
     * Sets the OSM element type.
     */
    public function setOsmType(?string $osmType): Location
    {
        $this->osmType = $osmType;

        return $this;
    }

    /**
     * Returns the OSM element identifier.
     */
    public function getOsmId(): ?string
    {
        return $this->osmId;
    }

    /**
     * Sets the OSM element identifier.
     */
    public function setOsmId(?string $osmId): Location
    {
        $this->osmId = $osmId;

        return $this;
    }

    /**
     * Returns the Wikidata identifier.
     */
    public function getWikidataId(): ?string
    {
        return $this->wikidataId;
    }

    /**
     * Sets the Wikidata identifier.
     */
    public function setWikidataId(?string $wikidataId): Location
    {
        $this->wikidataId = $wikidataId;

        return $this;
    }

    /**
     * Returns the Wikipedia reference string.
     */
    public function getWikipedia(): ?string
    {
        return $this->wikipedia;
    }

    /**
     * Sets the Wikipedia reference string.
     */
    public function setWikipedia(?string $wikipedia): Location
    {
        $this->wikipedia = $wikipedia;

        return $this;
    }

    /**
     * Returns alternative names keyed by qualifier or locale.
     *
     * @return array<string, string>|null
     */
    public function getAltNames(): ?array
    {
        return $this->altNames;
    }

    /**
     * Stores alternative names keyed by qualifier or locale.
     *
     * @param array<string, string>|null $altNames
     */
    public function setAltNames(?array $altNames): Location
    {
        $this->altNames = $altNames;

        return $this;
    }

    /**
     * Returns provider specific extra tags.
     *
     * @return array<string, string>|null
     */
    public function getExtraTags(): ?array
    {
        return $this->extraTags;
    }

    /**
     * Stores provider specific extra tags.
     *
     * @param array<string, string>|null $extraTags
     */
    public function setExtraTags(?array $extraTags): Location
    {
        $this->extraTags = $extraTags;

        return $this;
    }
}
